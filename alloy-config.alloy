// Send metrics to Grafana Cloud
prometheus.remote_write "grafana_cloud" {
  endpoint {
    url = env("GRAFANA_PROMETHEUS_HOST") + "/api/prom/push"
    basic_auth {
      username = env("GRAFANA_PROMETHEUS_USERNAME")
      password = env("GRAFANA_PROMETHEUS_PASSWORD")
    }
  }

  // Optional: rate limiting
  queue_config {
    capacity = 10000
    max_shards = coalesce(env("GRAFANA_PROMETHEUS_MAX_SHARDS"), 50)
    min_shards = 1
    max_samples_per_send = coalesce(env("GRAFANA_PROMETHEUS_MAX_SAMPLES_PER_SEND"), 2000)
  }
}

// Send logs to Grafana Cloud
loki.write "grafana_cloud" {
  endpoint {
    url = env("LOKI_HOST") + "/loki/api/v1/push"
    basic_auth {
      username = env("LOKI_USERNAME")
      password = env("LOKI_PASSWORD")
    }
  }
}

// HTTP server for receiving metrics
prometheus.receive_http "metrics_receiver" {
  http {
    listen_address = "0.0.0.0"
    listen_port = 9091
  }
  forward_to = [prometheus.remote_write.grafana_cloud.receiver]
}

// HTTP server for receiving logs
loki.source.api "logs_receiver" {
  http {
    listen_address = "0.0.0.0"
    listen_port = 3100
  }
  forward_to = [loki.write.grafana_cloud.receiver]
}

// Collect system metrics from Alloy itself
prometheus.exporter.unix "system" {
  disable_collectors = [
    "arp", "bcache", "bonding", "btrfs", "conntrack", 
    "edac", "fibrechannel", "hwmon", "infiniband", "ipvs",
    "mdadm", "nfs", "nfsd", "nvme", "powersupplyclass",
    "pressure", "rapl", "selinux", "tapestats", "thermal_zone",
    "timex", "udp_queues", "xfs", "zfs",
  ]
}

prometheus.scrape "system_metrics" {
  targets = prometheus.exporter.unix.system.targets
  forward_to = [prometheus.remote_write.grafana_cloud.receiver]
  scrape_interval = coalesce(env("SCRAPE_INTERVAL"), "30s")
}
